<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="com.zy"/>

    <bean id="greetingBefore" class="com.zy.advice.GreetingBeforeAdvice"/>
    <bean id="greetingAfter" class="com.zy.advice.GreetingAfterAdvice"/>
    <bean id="target" class="com.zy.advice.NaiveWaiter"/>
    <bean id="waiter" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:proxyInterfaces="com.zy.advice.Waiter"
          p:interceptorNames="greetingBefore,greetingAfter"
          p:target-ref="target"
          p:optimize="true"/>

    <bean id="greetingAround" class="com.zy.advice.GreetingInterceptor"/>
    <bean id="waiter2" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:proxyInterfaces="com.zy.advice.Waiter"
          p:interceptorNames="greetingAround"
          p:target-ref="target"
          p:optimize="true"/>

    <bean id="transactionManager" class="com.zy.advice.TransactionManager"/>
    <bean id="forumServiceTarget" class="com.zy.advice.ForumService"/>
    <bean id="forumService" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interceptorNames="transactionManager"
          p:target-ref="forumServiceTarget"
          p:proxyTargetClass="true"/>

    <bean id="pmonitor" class="com.zy.introduce.ControllablePerformanceMonitor"/>
    <bean id="forumServiceTarget2" class="com.zy.proxy.ForumServiceImpl"/>
    <bean id="forumService2" class="org.springframework.aop.framework.ProxyFactoryBean"
          p:interfaces="com.zy.introduce.Monitorable"
          p:target-ref="forumServiceTarget2"
          p:interceptorNames="pmonitor"
          p:proxyTargetClass="true"/>

    <!--spring中基于XML的AOP配置步骤
        1.把通知bean也交给spring来管理
        2.使用aop：config标签表明开始aop的配置
        3.使用aop：aspect标签表明配置切面
                id:给切面提供一个唯一标志
                ref：是指定通知类bean的id
        4.在aop：aspect标签的内部使用对应标签来配置通知的类型
            我们现在的实例是让pringLog方法在切入点方法执行之前执行，所以是前置通知
            aop：before表示配置前置通知
                 method属性：用于指定Logger类中哪个方法是前置通知
                 pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中的哪些方法增强

            切入点表达式的写法：
                关键字：execution（表达式）
                表达式：
                    访问修饰符 返回值 包名.包名....类名.方法名（参数列表）
                标准的表达式写法：
                    public void sise.cn.service.Impl.AccountServiceImpl.saveAccount()

            全通配写法：
                * *..*.*(..)
    		 实际开发中切入点表达式的通常写法：
                切到业务层实现类下的所有方法
                    * sise.cn.service.Impl.*.*(..)
    -->
    <!--配置AOP-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型且建立通知方法和切入点方法的关联
            用此方法后service中所有的方法都被加强 executio(* sise.cn.service.Impl.*.*(..))-->
            <aop:before method="printLog" pointcut="execution(public void com.zy.service.Impl.*.*(..))"/>
        </aop:aspect>
    </aop:config>
</beans>